/nav2/controller_server:
  ros__parameters:
    # controller server parameters (see Controller Server for more info)
    use_sim_time: True
    controller_frequency: 7.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    progress_checker_plugins: ["progress_checker"] # progress_checker_plugin: "progress_checker" For Humble and older
    goal_checker_plugins: ["goal_checker"]
    controller_plugins: ["FollowPath"]
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.05
      yaw_goal_tolerance: 0.05
      stateful: True
    # DWB controller parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: -0.15
      min_vel_y: -0.15 # 0'd for isaacsim
      max_vel_x: 0.15 
      max_vel_y: 0.15 # 0'd for isaacsim
      max_vel_theta: 0.5
      min_speed_theta: 0.0
      min_speed_xy: 0.0
      max_speed_xy: 0.15
      acc_lim_x: 0.1 # kept low for isaacsim
      acc_lim_y: 0.1 # 0'd for isaacsim
      acc_lim_theta: 0.5 # kept low for isaacsim
      decel_lim_x: -0.1 # kept low for isaacsim
      decel_lim_y: -0.1 # 0'd for isaacsim
      decel_lim_theta: -0.5 # kept low for isaacsim

      # Trajectory Generation params
      discretize_by_time: true
      sim_time: 1.7
      time_granularity: 0.2
      # linear_granularity: 0.05
      # angular_granularity: 0.25
      vx_samples: 15
      vy_samples: 15
      vtheta_samples: 25

      

      # Trajectory critics
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.05
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      limit_vel_cmd_in_traj: False
      stateful: True
      # Nav2 divides all critic scales by 100, except oscillation (not divided) and ObstacleBaseFootprint (divided by 50), and BaseObstacleCritic (not divided)
      critics: ["RotateToGoal", "PathDist", "ObstacleFootprint", "GoalDist", "TwirlingCritic", "PathAlign"]

      PathDist.scale: 2.0 # /100
      PathDist.aggregation_type: "last"

      PathAlign.scale: 2.0
      PathAlign.aggregation_type: "last"

      # GoalDist.scale Must be large enough so that robot reaches goal. As dist to goal decreases, goal critic is weaker, and slightly imperfect paths will be
      # devalued by PathDist and PathAlign, and the best path becomes 0-velocity, so the robot stops when 50-60cm away from its goal.
      GoalDist.scale: 2.5 
      GoalDist.aggregation_type: "last"
      
      ObstacleFootprint.scale: 150.0 # /50.0
      ObstacleFootprint.sum_scores: False

      TwirlingCritic.scale: 0.01

      RotateToGoal.scale: 5.0
      RotateToGoal.xy_goal_tolerance: 0.2 # Let rotate to goal start impacting trajectories a bit ahead of xy goal tolerance so robot smoothly rotates into position as it approaches goal
      RotateToGoal.trans_stopped_velocity: 0.25

      
      

/nav2/local_costmap/local_costmap:
  ros__parameters:

    footprint_padding: 0.0
    footprint: "[ [0.41, 0.25], [-0.41, 0.25], [-0.41, -0.25], [0.41, -0.25] ]"
    
    update_frequency: 10.0
    publish_frequency: 10.0
    global_frame: map
    robot_base_frame: base_link
    rolling_window: true
    resolution: 0.02  

    filters: ["keepout_filter", "inflation_layer"]
      
    keepout_filter:
      plugin: "nav2_costmap_2d::KeepoutFilter"
      enabled: True
      filter_info_topic: "/costmap_filter_info"

    plugins: ["static_layer", "inflation_layer", "obstacle_layer"]

    obstacle_layer:
      plugin: "nav2_costmap_2d::ObstacleLayer"
      enabled: True
      observation_sources: scan
      footprint_clearing_enabled: true
      max_obstacle_height: 2.0
      combination_method: 1
      scan:
        topic: /scan
        obstacle_max_range: 5.0
        obstacle_min_range: 0.0
        raytrace_max_range: 3.0
        raytrace_min_range: 0.0
        max_obstacle_height: 2.0
        min_obstacle_height: 0.0
        clearing: True
        marking: True
        data_type: "LaserScan"
        inf_is_valid: false

    static_layer:
      plugin: "nav2_costmap_2d::StaticLayer"
      map_subscribe_transient_local: True
      enabled: true
      subscribe_to_updates: true
      transform_tolerance: 0.1

    inflation_layer:
      plugin: "nav2_costmap_2d::InflationLayer"
      enabled: true
      inflation_radius: 0.2
      cost_scaling_factor: 10.0
      inflate_unknown: false
      inflate_around_unknown: true


